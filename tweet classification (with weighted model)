{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This classfication model has about 84.66% accuracy, and the loss on the validation set is quite a bit lower than the training set. I'm still slightly unclear if this constitutes 'overfitting' and I'd love to experiment more with increased regularization (higher weight decay, less momentum) to see how that changes the loss difference. \n",
    "\n",
    "\n",
    "While working on this model I found this kaggle kernel on using the same dataset, which doesn't suffer from the same 'validation set loss much lower than training set loss':\n",
    "\n",
    "https://www.kaggle.com/sharvari44/sentiment-analysis-using-lstm-ulmfit\n",
    "\n",
    "\n",
    "However, my model doesn't seem to exhibit the behavior of overfitting as described here. https://forums.fast.ai/t/determining-when-you-are-overfitting-underfitting-or-just-right/7732/9?u=wigglepuff\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastai.imports import *\n",
    "from fastai.text import *\n",
    "from torch import nn\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[PosixPath('data/tweets 2/tmp_lm'),\n",
       " PosixPath('data/tweets 2/lm_data.pkl'),\n",
       " PosixPath('data/tweets 2/tweets-temp'),\n",
       " PosixPath('data/tweets 2/test_data'),\n",
       " PosixPath('data/tweets 2/tmp_class'),\n",
       " PosixPath('data/tweets 2/tweets_valid.csv'),\n",
       " PosixPath('data/tweets 2/data_clas_export.pkl'),\n",
       " PosixPath('data/tweets 2/models'),\n",
       " PosixPath('data/tweets 2/.ipynb_checkpoints'),\n",
       " PosixPath('data/tweets 2/tweet_data'),\n",
       " PosixPath('data/tweets 2/train'),\n",
       " PosixPath('data/tweets 2/tweet_data.pkl'),\n",
       " PosixPath('data/tweets 2/temp'),\n",
       " PosixPath('data/tweets 2/tweet_together'),\n",
       " PosixPath('data/tweets 2/test')]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#getting the fp to tweet data (I have a lot of extra files here due to many attempts in different ways)\n",
    "\n",
    "path = Path('data/tweets 2')\n",
    "\n",
    "path.mkdir(parents = True, exist_ok = True)\n",
    "path.ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>airline_sentiment</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>neutral</td>\n",
       "      <td>@VirginAmerica What @dhepburn said.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>positive</td>\n",
       "      <td>@VirginAmerica plus you've added commercials t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>neutral</td>\n",
       "      <td>@VirginAmerica I didn't today... Must mean I n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>negative</td>\n",
       "      <td>@VirginAmerica it's really aggressive to blast...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>negative</td>\n",
       "      <td>@VirginAmerica and it's a really big bad thing...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  airline_sentiment                                               text\n",
       "0           neutral                @VirginAmerica What @dhepburn said.\n",
       "1          positive  @VirginAmerica plus you've added commercials t...\n",
       "2           neutral  @VirginAmerica I didn't today... Must mean I n...\n",
       "3          negative  @VirginAmerica it's really aggressive to blast...\n",
       "4          negative  @VirginAmerica and it's a really big bad thing..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets = pd.read_csv(path/'tweets_valid.csv')\n",
    "\n",
    "#made a new DF as calling 2 specific columns threw an error \n",
    "\n",
    "tweet2 = tweets[['airline_sentiment', 'text']]\n",
    "\n",
    "tweet2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>9178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neutral</th>\n",
       "      <td>3099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>2363</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   text\n",
       "airline_sentiment      \n",
       "negative           9178\n",
       "neutral            3099\n",
       "positive           2363"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet2.groupby(['airline_sentiment']).count() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11712.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(len(tweet2))*.8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = tweet2[:11712]\n",
    "valid = tweet2[11712:]\n",
    "\n",
    "#you screwed up the train test, so there were rows in BOTH TRAIN AND VALID! boi "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>7091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neutral</th>\n",
       "      <td>2617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   text\n",
       "airline_sentiment      \n",
       "negative           7091\n",
       "neutral            2617\n",
       "positive           2004"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(['airline_sentiment']).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>negative</th>\n",
       "      <td>2087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>neutral</th>\n",
       "      <td>482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>positive</th>\n",
       "      <td>359</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   text\n",
       "airline_sentiment      \n",
       "negative           2087\n",
       "neutral             482\n",
       "positive            359"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "valid.groupby(['airline_sentiment']).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "these should be your weights!\n",
    "\n",
    "negative: 7091 / 7091 = 1\n",
    "\n",
    "neutral= 7091 / 2617\n",
    "\n",
    "positive =  7091 / 2004"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_lm = TextLMDataBunch.from_df(path, train, valid, \n",
    "                                    text_cols='text', label_cols='airline_sentiment')\n",
    "\n",
    "#just used the same 80-20 ratio as I was going to use to assess the text classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>idx</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>about it xxbos @virginamerica seriously would pay $ 30 a flight for seats that did n't have this playing . \\n  it 's really the only bad thing about flying xxup va xxbos @virginamerica yes , nearly every time i fly xxup vx this “ xxunk xxunk ” wo n’t go away :) xxbos @virginamerica xxmaj really missed a prime opportunity for xxmaj men xxmaj without xxmaj hats xxunk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>. xxmaj got status on another airline ? xxmaj upgrade : http : / / t.co / xxunk ” xxunk ? xxunk xxbos @virginamerica trying to book a flight with you guys and your website wo n't let me ... about to lose my business xxbos @virginamerica you suck ! xxbos @virginamerica thanks ! xxbos @virginamerica xxmaj just dm'd . xxmaj same issue xxunk . xxbos @virginamerica xxmaj because we</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>atlantic ploughs a lone furrow in the # middleeast http : / / t.co / xxunk @thenationaluae xxbos @virginamerica xxmaj atlantic ploughs a lone furrow in the # middleeast http : / / t.co / xxunk @thenationaluae xxbos @virginamerica omg omg 😍 😍 nonstop xxmaj dallas to xxmaj austin on virgin ✨ 😱 ✈ ️ xxbos @virginamerica xxmaj your planes are really pretty . xxmaj just thought u should know</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>xxbos @united wo nt transfer flight ticket to xxunk an 11 yr old who 's active military mom had to have emergency brain surgery ? xxup wow ! ! xxbos @united xxunk 7 xxup weeks xxmaj late flightr xxup and i xxup still xxup have xxup not xxup received xxup my xxup miles xxup from xxup the mileageplus xxmaj gift xxmaj card $ 150 xxup xxunk xxup card i xxup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>since xxmaj continental . xxmaj upgrade xxunk paying 3 times or more on top of purchase ticket . xxbos @united xxmaj deep xxmaj xxunk xxunk xxbos @united at its worse . xxmaj ca n't figure how to pack plane , screws up xxunk then claims no xxunk rooms in xxmaj san xxmaj fran for stranded pax . xxmaj way to go ! xxbos @united 4 passengers after a 2 hour</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tweets_lm.show_batch()\n",
    "\n",
    "#Data has been numericalized and tokenized behind the scenes, thanks to the TextLMDataBunch call. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['xxunk',\n",
       " 'xxpad',\n",
       " 'xxbos',\n",
       " 'xxeos',\n",
       " 'xxfld',\n",
       " 'xxmaj',\n",
       " 'xxup',\n",
       " 'xxrep',\n",
       " 'xxwrep',\n",
       " '.',\n",
       " 'to',\n",
       " 'i',\n",
       " 'the',\n",
       " '!']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets_lm.vocab.itos[:14]\n",
    "\n",
    "#here's what the vocab looks like. the xx indicates an unknown / unrecognized character (could be emojis?)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Transfer Learning**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "lang_mod = language_model_learner(tweets_lm, arch=AWD_LSTM, drop_mult=.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#used class_mod's predict function to figure out weights = [negative, neutral, positive]\n",
    "#isn't necessary for language model though, just for classification. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#need to add class weights to cross entropy loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch import nn\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nn.CrossEntropyLoss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LR Finder is complete, type {learner_name}.recorder.plot() to see the graph.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lang_mod.lr_find()\n",
    "lang_mod.recorder.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>4.674071</td>\n",
       "      <td>4.719654</td>\n",
       "      <td>0.157143</td>\n",
       "      <td>00:08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4.364480</td>\n",
       "      <td>3.424392</td>\n",
       "      <td>0.314286</td>\n",
       "      <td>00:08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4.030209</td>\n",
       "      <td>3.184273</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>00:08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3.653688</td>\n",
       "      <td>3.040436</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>00:08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lang_mod.fit_one_cycle(4, 1e-01, moms= .9)\n",
    "#the one I decided to go with!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "lang_mod.save('lang_mod.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "lang_mod.load('lang_mod.pkl');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The training loss and validation loss both decrease with each iteration. After looking around, the reason the validation loss is much lower is most likely due to the default implementation of dropout during training (regularization tactic), which does not happen during validation. \n",
    "\n",
    "I also reduced the default momentum slightly (.95 to .9), and it improved the model slightly. As my data is only 14000 rows, I'm happy to report more regularization indeed does help the model here. \n",
    "\n",
    "Edit: *I'd try decreasing the momentum even more*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lang_mod.freeze()\n",
    "#lang_mod.lr_find(); lang_mod.recorder.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>3.438566</td>\n",
       "      <td>3.043740</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>00:11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>3.366679</td>\n",
       "      <td>2.727535</td>\n",
       "      <td>0.328571</td>\n",
       "      <td>00:11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3.051058</td>\n",
       "      <td>2.717747</td>\n",
       "      <td>0.357143</td>\n",
       "      <td>00:12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2.570147</td>\n",
       "      <td>2.751407</td>\n",
       "      <td>0.314286</td>\n",
       "      <td>00:12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lang_mod.fit_one_cycle(4, 1e-02, wd=.1)\n",
    "\n",
    "#model did overfit here slightly, I'd reccomend 3 epochs instead of 4. Increased weight decay to .1 here as well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "lang_mod.save('tuned_lang_mod.pkl')\n",
    "lang_mod.save_encoder('kaggle_encoder')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_clas = TextClasDataBunch.from_df(path, train, valid, vocab=tweets_lm.train_ds.vocab, bs=32)\n",
    "data_clas.save('data_clas_export.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_mod = text_classifier_learner(data_clas, arch= AWD_LSTM, drop_mult=.4)\n",
    "class_mod.load_encoder('kaggle_encoder')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Due to the imbalanced classes, I wanted to add weights to ensure the model was penalized highly for misclassifying the minority classes (neutral, positive). I divided the biggest class (negative) by each class, so the model is roughly penalized double for misclassifying neutral and positive texts incorrectly. \n",
    "\n",
    "This was changed to a FloatTensor and loaded on the GPU. \n",
    "\n",
    "https://forums.fast.ai/t/how-to-use-class-weights-in-loss-function-for-imbalanced-dataset/19589/7?u=wigglepuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = [(7091 / 7091), (7091 / 2617), (7091 / 2004)]\n",
    "class_weights=torch.FloatTensor(weights).cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_mod.crit = CrossEntropyFlat(weight = class_weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>xxbos @united xxmaj hi have a question re future xxmaj flight xxmaj booking xxmaj problems . xxup dub - xxup jac 29 / 9 xxup jac - xxup lax 8 / 10 xxup lax - xxup dub 13 / 10 . i 'm * xxup g. xxmaj what is checked bag allowance for xxup jac - xxup lax ?</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>xxbos @usairways xxup plans xxup changed ! xxup is xxup that xxup what u xxup call xxup not xxup bein xxup able 2 xxup park xxup on xxup time xxup planes w a 2 xxup hr xxup layover n b xxup able 2 xxup make xxup ur xxup connection ! # seriously</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>xxbos @southwestair i had to travel to xxmaj savannah , xxup ga , once again , on an airline i do n't \" xxmaj luv \" . xxmaj when r u going to fly me to xxmaj savannah ? xxmaj pl xxrep 4 e ase xxrep 4 !</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>xxbos xxup by xxup the xxup grace xxup of xxup god , i xxup made xxup it ! “ @usairways : xxup xxunk _ _ xxmaj we do n't have those xxunk in here . xxmaj we hope you can make that flight . ”</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>xxbos @united xxmaj united xxmaj club team is xxup a+ &amp; &amp; got me a seat xxmaj late xxmaj flightr . xxmaj still , not sure why a last min xxup ual xxmaj cancelled xxmaj flightlation costs me $ yet overbooked folks get $ ?</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_clas.show_batch()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.618378</td>\n",
       "      <td>0.506522</td>\n",
       "      <td>0.799522</td>\n",
       "      <td>00:09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod.fit_one_cycle(1, 1e-02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.603857</td>\n",
       "      <td>0.464530</td>\n",
       "      <td>0.816940</td>\n",
       "      <td>00:10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod.freeze_to(-2)\n",
    "\n",
    "class_mod.fit_one_cycle(1, slice(1e-02/(2.6**4), 1e-02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.537465</td>\n",
       "      <td>0.463338</td>\n",
       "      <td>0.817964</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.525435</td>\n",
       "      <td>0.461344</td>\n",
       "      <td>0.819672</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.542499</td>\n",
       "      <td>0.457224</td>\n",
       "      <td>0.818648</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.509708</td>\n",
       "      <td>0.460209</td>\n",
       "      <td>0.816940</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.498652</td>\n",
       "      <td>0.457400</td>\n",
       "      <td>0.820014</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.481031</td>\n",
       "      <td>0.454942</td>\n",
       "      <td>0.819331</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.488949</td>\n",
       "      <td>0.454570</td>\n",
       "      <td>0.821380</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod.unfreeze()\n",
    "#class_mod.lr_find();class_mod.recorder.plot()\n",
    "class_mod.fit_one_cycle(7, slice(1e-04/(2.6**4),1e-04))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_mod.save('class_mod_weighted.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "interp = ClassificationInterpretation.from_learner(class_mod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "interp.plot_confusion_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**I was curious to see what the model would look like without the class weights:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "class_mod2 = text_classifier_learner(data_clas, arch= AWD_LSTM, drop_mult=.4)\n",
    "class_mod2.load_encoder('kaggle_encoder') #loaded same encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.621391</td>\n",
       "      <td>0.516647</td>\n",
       "      <td>0.794740</td>\n",
       "      <td>00:12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#class_mod.fit_one_cycle(1, 1e-02, wd= .1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.635849</td>\n",
       "      <td>0.504439</td>\n",
       "      <td>0.800888</td>\n",
       "      <td>00:09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod2.fit_one_cycle(1, 1e-02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.590291</td>\n",
       "      <td>0.469012</td>\n",
       "      <td>0.816257</td>\n",
       "      <td>00:11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod2.freeze_to(-2)\n",
    "\n",
    "class_mod2.fit_one_cycle(1, slice(1e-02/(2.6**4), 1e-02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: left;\">\n",
       "      <th>epoch</th>\n",
       "      <th>train_loss</th>\n",
       "      <th>valid_loss</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.522890</td>\n",
       "      <td>0.466587</td>\n",
       "      <td>0.822404</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.538193</td>\n",
       "      <td>0.461947</td>\n",
       "      <td>0.812842</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.506504</td>\n",
       "      <td>0.454933</td>\n",
       "      <td>0.822063</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.524938</td>\n",
       "      <td>0.462220</td>\n",
       "      <td>0.811475</td>\n",
       "      <td>00:20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.480300</td>\n",
       "      <td>0.450688</td>\n",
       "      <td>0.822746</td>\n",
       "      <td>00:21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.491531</td>\n",
       "      <td>0.449495</td>\n",
       "      <td>0.819672</td>\n",
       "      <td>00:21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0.486150</td>\n",
       "      <td>0.453587</td>\n",
       "      <td>0.815232</td>\n",
       "      <td>00:21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_mod2.unfreeze()\n",
    "#class_mod.lr_find();class_mod.recorder.plot()\n",
    "class_mod2.fit_one_cycle(7, slice(1e-04/(2.6**4),1e-04))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "interp2 = ClassificationInterpretation.from_learner(class_mod2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "interp2.plot_confusion_matrix(title = 'Model Without Class Weights')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "interp.plot_confusion_matrix(title='Model with Class Weights') \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
